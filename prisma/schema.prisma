generator client {
      provider = "prisma-client-js"
}

datasource db {
      provider          = "postgresql"
      url               = env("DATABASE_URL")
      shadowDatabaseUrl = env("HEROKU_POSTGRESQL_MAROON_URL")
}

model Account {
      id                String  @id @default(cuid())
      userId            String
      type              String
      provider          String
      providerAccountId String
      refresh_token     String? @db.Text
      access_token      String? @db.Text
      expires_at        Int?
      token_type        String?
      scope             String?
      id_token          String? @db.Text
      session_state     String?

      user User @relation(fields: [userId], references: [id], onDelete: Cascade)

      @@unique([provider, providerAccountId])
}

model Session {
      id           String   @id @default(cuid())
      sessionToken String   @unique
      userId       String
      expires      DateTime
      user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
      id            String    @id @default(cuid())
      name          String?
      email         String?   @unique
      emailVerified DateTime?
      image         String?
      accounts      Account[]
      sessions      Session[]
      Program       Program[]
}

model VerificationToken {
      identifier String
      token      String   @unique
      expires    DateTime

      @@unique([identifier, token])
}

model Profile {
      id     Int     @id @default(autoincrement())
      bio    String?
      userId Int     @unique

}

model Program {
      id            Int          @id @default(autoincrement())
      name          String       @db.VarChar(255)
      description   String
      subcategory   Subcategory  @relation(fields: [subcategoryId], references: [id])
      rates         Rate[]
      createdAt     DateTime     @default(now())
      updatedAt     DateTime     @updatedAt
      subcategoryId Int
      curriculum    Curriculum[]
      UserId        Int?
      User          User?        @relation(fields: [userId], references: [id])
      userId        String?
}

model Rate {
      id        Int      @id @default(autoincrement())
      rate      Int
      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt
      Program   Program? @relation(fields: [programId], references: [id])
      programId Int?
}

model Curriculum {
      id        Int      @id @default(autoincrement())
      name      String   @db.VarChar(255)
      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt
      Program   Program? @relation(fields: [programId], references: [id])
      programId Int?
}

model Category {
      id            Int           @id @default(autoincrement())
      name          String        @db.VarChar(255)
      subcategories Subcategory[]
      createdAt     DateTime      @default(now())
      updatedAt     DateTime      @updatedAt
}

model Subcategory {
      id          Int       @id @default(autoincrement())
      name        String    @db.VarChar(255)
      description String
      icon        String?
      url         String
      category    Category  @relation(fields: [categoryId], references: [id])
      sub         Sub[]
      createdAt   DateTime  @default(now())
      updatedAt   DateTime  @updatedAt
      categoryId  Int
      Program     Program[]
      subId       Int
}

model Sub {
      id            Int          @id @default(autoincrement())
      name          String       @db.VarChar(255)
      description   String
      icon          String?
      url           String
      createdAt     DateTime     @default(now())
      updatedAt     DateTime     @updatedAt
      categoryId    Int
      Subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id])
      subcategoryId Int?
}

model Sales {
      id        Int      @id @default(autoincrement())
      email     String   @db.VarChar(255)
      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt
}
